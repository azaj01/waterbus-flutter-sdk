// Mocks generated by Mockito 5.4.4 from annotations
// in waterbus_sdk/test/features/profile/data/repositories/user_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes

import 'dart:async' as _i4;
import 'dart:typed_data' as _i6;

import 'package:mockito/mockito.dart' as _i1;

import 'package:waterbus_sdk/types/models/user_model.dart' as _i5;
import 'package:waterbus_sdk/types/result.dart' as _i2;

import 'package:waterbus_sdk/core/api/user/datasources/user_remote_datasource.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResult_0<T> extends _i1.SmartFake implements _i2.Result<T> {
  _FakeResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [UserRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRemoteDataSource extends _i1.Mock
    implements _i3.UserRemoteDataSource {
  @override
  _i4.Future<_i2.Result<_i5.User>> getUserProfile() => (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Result<_i5.User>>.value(_FakeResult_0<_i5.User>(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<_i5.User>>.value(_FakeResult_0<_i5.User>(
          this,
          Invocation.method(
            #getUserProfile,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<_i5.User>>);

  @override
  _i4.Future<_i2.Result<bool>> updateUserProfile(_i5.User? user) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserProfile,
          [user],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #updateUserProfile,
            [user],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #updateUserProfile,
            [user],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> updateUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUsername,
          [username],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #updateUsername,
            [username],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #updateUsername,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<bool>> checkUsername(String? username) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkUsername,
          [username],
        ),
        returnValue: _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #checkUsername,
            [username],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<bool>>.value(_FakeResult_0<bool>(
          this,
          Invocation.method(
            #checkUsername,
            [username],
          ),
        )),
      ) as _i4.Future<_i2.Result<bool>>);

  @override
  _i4.Future<_i2.Result<List<_i5.User>>> searchUsers({
    required String? keyword,
    required int? skip,
    required int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchUsers,
          [],
          {
            #keyword: keyword,
            #skip: skip,
            #limit: limit,
          },
        ),
        returnValue: _i4.Future<_i2.Result<List<_i5.User>>>.value(
            _FakeResult_0<List<_i5.User>>(
          this,
          Invocation.method(
            #searchUsers,
            [],
            {
              #keyword: keyword,
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
        returnValueForMissingStub: _i4.Future<_i2.Result<List<_i5.User>>>.value(
            _FakeResult_0<List<_i5.User>>(
          this,
          Invocation.method(
            #searchUsers,
            [],
            {
              #keyword: keyword,
              #skip: skip,
              #limit: limit,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<List<_i5.User>>>);

  @override
  _i4.Future<_i2.Result<String>> getPresignedUrl() => (super.noSuchMethod(
        Invocation.method(
          #getPresignedUrl,
          [],
        ),
        returnValue: _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #getPresignedUrl,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #getPresignedUrl,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Result<String>>);

  @override
  _i4.Future<_i2.Result<String>> uploadImageToS3({
    required String? uploadUrl,
    required _i6.Uint8List? image,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImageToS3,
          [],
          {
            #uploadUrl: uploadUrl,
            #image: image,
          },
        ),
        returnValue: _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #uploadImageToS3,
            [],
            {
              #uploadUrl: uploadUrl,
              #image: image,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Result<String>>.value(_FakeResult_0<String>(
          this,
          Invocation.method(
            #uploadImageToS3,
            [],
            {
              #uploadUrl: uploadUrl,
              #image: image,
            },
          ),
        )),
      ) as _i4.Future<_i2.Result<String>>);
}
